#pragma kernel CalculatePressure
#pragma kernel CalculateNormal
#pragma kernel CalculateForces
#pragma kernel ApplyForces
#pragma kernel ComputeColliders

RWTexture2D<float> Result;

//simulation properties
int particleCount;
float smoothingLength;
float timeInterval;
//

//fluid properties
float baseDensity;
float viscosity;
float surfaceTension;
float gravityForce;
//

//particle properties
float radius;
float particleMass;
//

//constants
float pressureConstant;
float Poly6KernelConstant;
float Poly6GradKernelConstant;
float SpikyKernelConstant;
float SpikyGradKernelConstant;
float SpikyGradSquaredKernelConstant;
float ViscosityLaplaceKernelConstant;
float SurfaceTensionConstant;
float SurfaceTensionOffset;
//

//collider calculation
int colliderCount;

float particleDrag;
float damping;

float3 penetrationNormal;
float penetrationLength;
float3 penetrationPosition;
//

struct Particle
{
    int ind;
    float density;
    float pressure;
    float3 force;
    float3 velocity;
    float3 normal;
    float3 position;
};

struct SPHCollider
{
    float3 position;
    float3 right;
    float3 up;
    float2 scale;
};

shared RWStructuredBuffer<Particle> particleBuffer;
shared StructuredBuffer<int> neighborBuffer;
shared StructuredBuffer<SPHCollider> colliders;

float Poly6(float distance)
{
    return pow(pow(smoothingLength, 2) - pow(distance, 2), 3);
}

float3 Poly6Grad(float3 distance)
{
    return pow(pow(smoothingLength, 2) - dot(distance, distance), 2) * distance;
}

float3 SpikyGrad(float3 distance)
{
    return pow(smoothingLength - length(distance), 2) * distance / length(distance);
}

float SpikyGradSquared(float distance)
{
    return SpikyGradSquaredKernelConstant * 1/distance * pow(smoothingLength-distance, 2) - (smoothingLength-distance);
}    

float ViscosityLaplace(float distance)
{
    return (smoothingLength - distance);
}

float SurfaceTension(float distance)
{
    if(distance < smoothingLength / 2)
        return 2 * pow(smoothingLength - distance, 3) * pow(distance, 3) + SurfaceTensionOffset;
    else
        return pow(smoothingLength - distance, 3) * pow(distance, 3);
}

bool Intersect(SPHCollider collider, float3 position)
{
    float3 colliderProjection = collider.position - position;

    penetrationNormal = cross(collider.right, collider.up);
    penetrationLength = abs(dot(colliderProjection, penetrationNormal)) - (radius / 2.0);
    penetrationPosition = position;

    return penetrationLength < 0.0
        && abs(dot(colliderProjection, collider.right)) < collider.scale.x
        && abs(dot(colliderProjection, collider.up)) < collider.scale.y;
}

float3 DampVelocity(SPHCollider collider, float3 velocity, float drag)
{
    float3 newVelocity = dot(velocity, penetrationNormal) * penetrationNormal * damping
                    + dot(velocity, collider.right) * collider.right * drag
                    + dot(velocity, collider.up) * collider.up * drag;

    float3 forward = float3(0,0,1);
    float3 right = float3(1,0,0);
    float3 up = float3(0,1,0);

    return dot(newVelocity, forward) * forward
            + dot(newVelocity, right) * right
            + dot(newVelocity, up) * up;
}


[numthreads(128,1,1)]
void CalculatePressure (uint3 id : SV_DispatchThreadID)
{
    Particle particleI = particleBuffer[id.x];
    particleI.density = 0;

    for(int j = 0; j < particleCount; j++)
    {
        if(id.x == (uint)j) continue;

        Particle particleJ = particleBuffer[j];

        float3 distance = particleI.position - particleJ.position;
        if(length(distance) > smoothingLength) continue;

        particleI.density += Poly6(dot(distance, distance));
    }

    particleI.density *= Poly6KernelConstant * particleMass * baseDensity;
    particleI.pressure = pressureConstant * (pow(particleI.density / baseDensity, 7) - 1);

    particleBuffer[id.x] = particleI;
}

[numthreads(128,1,1)]
void CalculateNormal (uint3 id : SV_DispatchThreadID)
{
    Particle particleI = particleBuffer[id.x];
    particleI.normal = 0;

    for(int j = 0; j < particleCount; j++)
    {
        if(id.x == (uint)j) continue;

        Particle particleJ = particleBuffer[j];

        float3 distance = particleI.position - particleJ.position;
        if(length(distance) > smoothingLength) continue;

        particleI.normal += Poly6Grad(distance) / particleJ.density;
    }

    particleI.normal *= smoothingLength * particleMass * Poly6GradKernelConstant;

    particleBuffer[id.x] = particleI;
}

[numthreads(128,1,1)]
void CalculateForces(uint3 id : SV_DispatchThreadID)
{
    Particle particleI = particleBuffer[id.x];

    float3 pressureForce = 0;
    float3 viscosityForce = 0;
    float3 cohesionForce = 0;
    float3 curvatureForce = 0;

    for(int j = 0; j < particleCount; j++)
    {
        if(id.x == (uint)j) continue;

        Particle particleJ = particleBuffer[j];

        float3 distance = particleI.position - particleJ.position;
        if(length(distance) > smoothingLength) continue;

        viscosityForce += (particleI.velocity - particleJ.velocity) / particleJ.density * ViscosityLaplace(length(distance));
        pressureForce -= (particleI.pressure / pow(particleI.density, 2) + particleJ.pressure / pow(particleJ.density, 2)) * SpikyGrad(distance);

        float correctionFactor = 2 * baseDensity / (particleI.density + particleJ.density);
        cohesionForce += correctionFactor * (distance / length(distance)) * SurfaceTension(length(distance));
        curvatureForce += correctionFactor * (particleI.normal - particleJ.normal);
    }

    pressureForce *= pow(particleMass, 2) * SpikyGradKernelConstant;
    viscosityForce *= viscosity * particleMass * ViscosityLaplaceKernelConstant;
    cohesionForce *= -surfaceTension * pow(particleMass, 2) * SurfaceTensionConstant;
    curvatureForce *= -surfaceTension * particleMass;

    particleI.force += pressureForce + viscosityForce + cohesionForce + curvatureForce;
    particleI.force += gravityForce * particleMass;

    particleBuffer[id.x] = particleI;
}


[numthreads(128,1,1)]
void ApplyForces(uint3 id : SV_DispatchThreadID)
{
    Particle particle = particleBuffer[id.x];

    particle.velocity += timeInterval * particle.force / particleMass;
    particle.position += timeInterval * particle.velocity;

    particleBuffer[id.x] = particle;
}

[numthreads(128,1,1)]
void ComputeColliders (uint3 id : SV_DispatchThreadID)
{
    Particle particle = particleBuffer[id.x];

    for(int i = 0; i < colliderCount; i++)
    {
        SPHCollider collider = colliders[i];

        if(Intersect(collider, particle.position))
        {
            particle.velocity = DampVelocity(collider, particle.velocity, 1.0 - particleDrag);
            particle.position = penetrationPosition - penetrationNormal * abs(penetrationLength);
        }
    }

    particleBuffer[id.x] = particle;
}
